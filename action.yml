name: install node modules

inputs:
  root:      { required: false, type: string, default: . }
  cache:     { required: false, type: string, default: yes }
  cache-gen: { required: false, type: string, default: v1 }

outputs:
  cache-hit:
    value: ${{ steps.cache.outputs.cache-hit }}

runs:
  using: composite
  steps:

    - id: info
      shell: bash
      run: |
        case "${{ inputs.cache }}" in
          yes|workflow) cache="${{ inputs.cache }}" ;;
          *)            cache=no ;;
        esac
        gen="${{ inputs.cache-gen }}"
        node -v
        env_hash="$( (uname -mrsv; node -v) | md5sum | awk '{print $1}' )"
        file_hash="${{ hashFiles(format('{0}/**/package-lock.json', inputs.root), format('{0}/**/yarn.lock', inputs.root)) }}"
        hash="$file_hash-$gen-$env_hash"
        [ "$cache" == 'workflow' ] && hash="$hash-${{ github.run_id }}"
        cat << END
        ::set-output name=cache::$cache
        ::set-output name=hash::$hash
        END

    - id: cache
      if: steps.info.outputs.cache != 'no'
      uses: actions/cache@v2
      with:
        path: ${{ inputs.root }}/*/node_modules
        key: ${{ steps.info.outputs.hash }}

    - id: install
      shell: bash
      run: |
        root="${{ inputs.root }}"
        for path in $(find $root \( -name node_modules -prune \) -o -name package-lock.json -o -name yarn.lock)
        do
          lock=$(basename $path)
          dir=$(dirname $path)
          if [ -d $dir/node_modules ]
          then
            echo "skip $dir"
          else
            echo "configure $dir"
            case $lock in
              package-lock.json)
                (cd $dir && npm install) ;;
              yarn.lock)
                (cd $dir && yarn --check-files --frozen-lockfile --non-interactive) ;;
            esac
          fi
        done
